/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
**                   Auther: Qiang Xin Bo                          **
********************************************************************/
#ifndef __DMTIMERMODULE_H_INCLUDE__
#define __DMTIMERMODULE_H_INCLUDE__

#include "dmsingleton.h"
#include "dmrapidpool.h"
#include "dmtimernode.h"

#ifdef WIN32
struct timezone
{
    int  tz_minuteswest; /* minutes W of Greenwich */
    int  tz_dsttime;     /* type of dst correction */
};

static inline int gettimeofday(struct ::timeval *tv, struct timezone *tz);
#endif

static inline unsigned int GetTickCount32()
{
#ifdef WIN32
    return ::GetTickCount();
#else
    struct timespec ts = {0};
    clock_gettime(CLOCK_MONOTONIC, &ts);
    return (ts.tv_sec * 1000 + ts.tv_nsec / 1000000);
#endif
}

class CDMTimeElapse
{
public:
    CDMTimeElapse()
    {
        Start();
    }

    inline void Start()
    {
        m_dwStart = GetTickCount32();
    }

    inline unsigned int End()
    {
        return GetTickCount32() - m_dwStart;
    }

private:
    unsigned int m_dwStart;
};


class CDMTimerModule : public TSafeSingleton<CDMTimerModule>
{
public:
    friend class TSafeSingleton<CDMTimerModule>;

    enum
    {
        eMAX_POOL_S = 50000,
        eMAX_POOL_I = 1000,
        eMAX_TIME_COUNT = eMAX_POOL_S * eMAX_POOL_I,
    };

public:
    CDMTimerModule();

    virtual ~CDMTimerModule();

    void Init();
    void UnInit();
    int Run();

    unsigned long long GetCurTime();

    CDMTimerElement* FetchElement();
    void ReleaseElement(CDMTimerElement* pElement);

    void AddTimerElement(CDMTimerElement* pElement);
    void RemoveTimerElement(CDMTimerElement* pElement);
public:
    unsigned long long GetBootTime();

private:
    void    __ReleaseElement(struct list_head *head);
    int     __Cascade(TVec* tv, int idx);
    bool    __TimerPending(CDMTimerElement* pElement);

    CDMTimerElement* __GetTimerInfoByEntry(list_head* head);
private:
    CDynamicRapidPool<CDMTimerElement, eMAX_POOL_S, eMAX_POOL_I>  m_oTimerElementPool;

    unsigned long long m_qwLastTime;
    unsigned long long m_qwCurTime;

    unsigned int m_dwTickTime;
    unsigned long long m_qwTickCount;
    TVec_Root   m_tv1;
    TVec        m_tv2;
    TVec        m_tv3;
    TVec        m_tv4;
    TVec        m_tv5;
};

#endif // __DMTIMERMODULE_H_INCLUDE__

