cmake_minimum_required(VERSION 2.8)
PROJECT(dmtimer)

SET(CMAKE_VERBOSE_MAKEFILE ON)

IF (WIN32)  
    MESSAGE(STATUS "Now is windows")  

    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11" )

    SET(DMOS_NAME "win")
ELSEIF (APPLE)  
    MESSAGE(STATUS "Now is Apple systems")  
    ADD_DEFINITIONS(-DDMTIMER_USE_MACOSX)

    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread" )

    SET(DMOS_NAME "mac") 
ELSEIF (UNIX)  
    MESSAGE(STATUS "Now is UNIX-like OS")  
    ADD_DEFINITIONS(-DDMTIMER_USE_LINUX)

    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread" )

    SET(DMOS_NAME "lin") 
ENDIF ()

IF (WIN32)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)

    LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/lib)

    SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)
    SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib)

    FILE(GLOB_RECURSE DMTIMER_SOURCES
        ${CMAKE_CURRENT_SOURCE_DIR}/include/dmtimer/*.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/include/dmtimer/*.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/include/dmtimer/*.c
        ${CMAKE_CURRENT_SOURCE_DIR}/include/dmtimer/*.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/include/dmtimer/*.h

        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.c
        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.h)

    ADD_LIBRARY(dmtimer ${DMTIMER_SOURCES})

    FILE(GLOB_RECURSE DMTIMERTEST_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/test/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/test/*.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/test/*.c
    ${CMAKE_CURRENT_SOURCE_DIR}/test/*.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/test/*.h)

    ADD_EXECUTABLE(dmtimertest ${DMTIMERTEST_SOURCES})

    TARGET_LINK_LIBRARIES(dmtimertest dmtimer)
ELSEIF (APPLE)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)

    LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/lib/${DMOS_NAME})

    SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)
    SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib/${DMOS_NAME})

    FILE(GLOB_RECURSE DMTIMER_SOURCES
        ${CMAKE_CURRENT_SOURCE_DIR}/include/dmtimer/*.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/include/dmtimer/*.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/include/dmtimer/*.c
        ${CMAKE_CURRENT_SOURCE_DIR}/include/dmtimer/*.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/include/dmtimer/*.h

        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.c
        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.h)

    ADD_LIBRARY(dmtimer ${DMTIMER_SOURCES})
    TARGET_LINK_LIBRARIES(dmtimer)

    FILE(GLOB_RECURSE TEST_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/test/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/test/*.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/test/*.c
    ${CMAKE_CURRENT_SOURCE_DIR}/test/*.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/test/*.h)

    ADD_EXECUTABLE(dmtimertest ${TEST_SOURCES})

    TARGET_LINK_LIBRARIES(dmtimertest dmtimer)
ELSEIF(UNIX)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)

    LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/lib/${DMOS_NAME})

    SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)
    SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib/${DMOS_NAME})

    FILE(GLOB_RECURSE DMTIMER_SOURCES
        ${CMAKE_CURRENT_SOURCE_DIR}/include/dmtimer/*.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/include/dmtimer/*.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/include/dmtimer/*.c
        ${CMAKE_CURRENT_SOURCE_DIR}/include/dmtimer/*.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/include/dmtimer/*.h

        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.c
        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.h)

    ADD_LIBRARY(dmtimer ${DMTIMER_SOURCES})
    TARGET_LINK_LIBRARIES(dmtimer)

    FILE(GLOB_RECURSE TEST_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/test/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/test/*.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/test/*.c
    ${CMAKE_CURRENT_SOURCE_DIR}/test/*.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/test/*.h)

    ADD_EXECUTABLE(dmtimertest ${TEST_SOURCES})

    TARGET_LINK_LIBRARIES(dmtimertest dmtimer)
ENDIF ()

MESSAGE(STATUS ${CMAKE_CXX_FLAGS})

